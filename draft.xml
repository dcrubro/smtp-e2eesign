<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.29 (Ruby 3.4.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="trust200902" docName="draft-jonaskorenenovak-smtp-e2eesign-00" category="info" submissionType="independent" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="SMTP-E2EESIGN">SMTP Extensions for End-to-End Encryption and User-Level Signatures</title>

    <author fullname="Jonas Korene Novak">
      <organization>Independent</organization>
      <address>
        <email>info@dcrubro.com</email>
      </address>
    </author>

    <date year="2025" month="July" day="06"/>

    <area>ART</area>
    <workgroup>DISPATCH</workgroup>
    <keyword>SMTP</keyword> <keyword>E2EE</keyword> <keyword>cryptographic signature</keyword> <keyword>mail</keyword>

    <abstract>


<?line 35?>

<t>This Internet-Draft proposes adding extensions to the SMTP protocol that allow for true End-to-End Encryption and cryptographic signatures between users on a SMTP server. Current DKIM only allows for server verification, while messages sent through secure channels only encrypt traffic between servers, not between users.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        The latest revision of this draft can be found at <eref target="https://dcrubro.com/files/smtp-ee2esign-latest.html"/>.
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-jonaskorenenovak-smtp-e2eesign/"/>.
      </t>
      <t>
        Discussion of this document takes place on the
        DISPATCH Working Group mailing list (<eref target="mailto:dispatch@ietf.org"/>),
        which is archived at <eref target="https://mailarchive.ietf.org/arch/browse/dispatch"/>.
        Subscribe at <eref target="https://www.ietf.org/mailman/listinfo/dispatch/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/dcrubro/smtp-e2eesign"/>.</t>
    </note>


  </front>

  <middle>


<?line 39?>

<section anchor="introduction"><name>Introduction</name>

<t>The current version of SMTP, even with protocols like SMTPS, STARTTLS and DKIM, lacks native support for user-level encryption and cryptographic identity. This document proposes three new SMTP extensions — <spanx style="verb">ENCRYPTMESSAGE</spanx>,  <spanx style="verb">SIGNMESSAGE</spanx> and <spanx style="verb">AUTH HASHEDPASS</spanx> — that allow for end-to-end encrypted content, sender-level digital signatures and hash-based authentication that prevents SMTP servers reconstructing user private keys.</t>

</section>
<section anchor="conventions-and-definitions"><name>Conventions and Definitions</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<?line -18?>

<t>This document uses the following terms:</t>

<t><list style="symbols">
  <t><strong>MUA (Mail User Agent)</strong> and <strong>MTA (Mail Transfer Agent)</strong> as defined in <xref target="RFC5321"></xref>.</t>
  <t><strong>E2EE</strong>, which stands for <em>End-to-End Encryption</em>.</t>
  <t><strong>Plain-text</strong>, which refers to an unencrypted, human-readable message that can be read by anyone.</t>
</list></t>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This protocol enhances SMTP security by enabling user-level E2EE and cryptographic signatures. However, several risks and considerations apply:</t>

<section anchor="downgrade-attacks"><name>Downgrade Attacks</name>
<t>Clients and servers <bcp14>MUST</bcp14> ensure that use of <spanx style="verb">ENCRYPTMESSAGE</spanx>, <spanx style="verb">SIGNMESSAGE</spanx> and <spanx style="verb">AUTH HASHEDPASS</spanx> is not silently disabled or ignored in transit. SMTP downgrade attacks are a known vector (e.g., STARTTLS stripping).</t>

</section>
<section anchor="channel-security"><name>Channel Security</name>
<t>All authentication commands (e.g., <spanx style="verb">AUTH HASHEDPASS</spanx>, <spanx style="verb">GETSALT</spanx>) <bcp14>MUST</bcp14> be used <strong>only over secure channels</strong> such as SMTPS or STARTTLS. Servers <bcp14>MUST</bcp14> reject these commands over plain-text connections (normal SMTP).</t>

</section>
<section anchor="key-authenticity"><name>Key Authenticity</name>
<t>Clients retrieving public keys via <spanx style="verb">PUBKEY</spanx> <bcp14>MUST</bcp14> validate that the key is returned from the intended domain. If DNS spoofing or MITM occurs, a forged public key could be inserted.</t>

</section>
<section anchor="key-compromise"><name>Key Compromise</name>
<t>If a user's private key is compromised, message confidentiality and authenticity are at risk. Clients <bcp14>SHOULD</bcp14> support key rotation and expiration.</t>

</section>
<section anchor="hash-function-strength"><name>Hash Function Strength</name>
<t>If password-based key derivation is used, the hashing algorithm (Argon2) <bcp14>MUST</bcp14> be strong and salted. SHA-1 and MD5 are not permitted.</t>

</section>
<section anchor="replay-and-injection"><name>Replay and Injection</name>
<t>Signatures must include timestamping or message-ID binding to prevent replay or message tampering. Signatures over headers <bcp14>MUST</bcp14> include all content-critical headers (To, From, Date, Subject).</t>

</section>
<section anchor="metadata-leakage"><name>Metadata Leakage</name>
<t>Message headers like "Subject" may leak information about the message. These <bcp14>SHOULD</bcp14> be encrypted along with the main body of the message to avoid leaking information.</t>

</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requests the registration of the following SMTP extension keywords in the "SMTP Service Extensions" registry:</t>

<t><list style="symbols">
  <t>Keyword: ENCRYPTMESSAGE
Description: Indicates support for user-level message encryption via public key.
Reference: This document</t>
  <t>Keyword: SIGNMESSAGE
Description: Indicates support for cryptographic message signatures by end users.
Reference: This document</t>
  <t>Keyword: AUTH HASHEDPASS
Description: An SMTP AUTH method that uses hashed password credentials.
Reference: This document</t>
</list></t>

</section>
<section anchor="protocol-extensions"><name>Protocol Extensions</name>

<t>Servers that support the extensions defined by this document <bcp14>MUST</bcp14> advertise the <spanx style="verb">ENCRYPTMESSAGE</spanx>, <spanx style="verb">SIGNMESSAGE</spanx> and <spanx style="verb">AUTH HASHEDPASS</spanx> EHLO keywords. These keywords indicate that the server supports the extensions, headers and commands defined by this document.</t>

</section>
<section anchor="hashing-and-key-derivation-algorithms"><name>Hashing and Key Derivation Algorithms</name>

<t>This protocol uses a password-derived key for both authentication (<spanx style="verb">AUTH HASHEDPASS</spanx>)
and private key generation (via <spanx style="verb">GETSALT</spanx>).</t>

<t>Servers and clients implementing this protocol:</t>

<t><list style="symbols">
  <t><strong><bcp14>MUST</bcp14> support <spanx style="verb">Argon2id</spanx></strong> with at least 256-bit output and configurable parameters</t>
  <t><strong><bcp14>MUST NOT</bcp14> use PBKDF2, SHA-1, or unsalted hashes</strong></t>
</list></t>

<t>Salt values used in this scheme <bcp14>MUST</bcp14> be:
- At least 128 bits
- Unique per user
- Randomly generated at account creation and returned by <spanx style="verb">GETSALT</spanx></t>

</section>
<section anchor="protocol-definitions"><name>Protocol Definitions</name>

<t>This document introduces three new EHLO extensions: <spanx style="verb">ENCRYPTMESSAGE</spanx>, <spanx style="verb">SIGNMESSAGE</spanx> and <spanx style="verb">AUTH HASHEDPASS</spanx>. These keywords advertise the server’s support for end-to-end encryption, user-level message signing and hash-based authentication as defined in this protocol. Clients can use their presence in the EHLO response to determine whether the remote SMTP server supports these features.</t>

<t>This protocol also defines four new SMTP commands: <spanx style="verb">PUBKEY</spanx>, <spanx style="verb">SETPUBKEY</spanx>, <spanx style="verb">GETSALT</spanx> and <spanx style="verb">RSTSALT</spanx>.</t>

<t><list style="symbols">
  <t><strong>The <spanx style="verb">PUBKEY</spanx> command</strong> retrieves the public key associated with a specific email identity, allowing the sender to encrypt messages for the intended recipient. The key is returned as a base64 encoded string with a prepended algorithm identifier. It <bcp14>SHOULD</bcp14> be issued before <strong>MAIL FROM</strong> and doesn't require authentication.</t>
</list></t>

<figure><sourcecode type="example"><![CDATA[
C: PUBKEY alice@example.com
S: 220 ed25519 QUFBQUMzTnphQzFsWkR...
]]></sourcecode></figure>

<t><list style="symbols">
  <t>For an unknown user:</t>
</list></t>

<figure><sourcecode type="example"><![CDATA[
C: PUBKEY bob@example.net
S: 550 No public key available for bob@example.net
]]></sourcecode></figure>

<t><list style="symbols">
  <t><strong>The <spanx style="verb">SETPUBKEY</spanx> command</strong> requests the server to set the server-stored public key for the authenticated user to the requested value. This command can be used to modify the public key in case of a password or salt change. It <bcp14>SHOULD</bcp14> be issued before <strong>MAIL FROM</strong> and requires authentication.</t>
</list></t>

<figure><sourcecode type="example"><![CDATA[
C: SETPUBKEY base64(publickey)
S: 250 OK
]]></sourcecode></figure>

<t><list style="symbols">
  <t>For an unauthenticated session:</t>
</list></t>

<figure><sourcecode type="example"><![CDATA[
C: SETPUBKEY base64(publickey)
S: 530 5.7.0 Authentication required
]]></sourcecode></figure>

<t><list style="symbols">
  <t><strong>The <spanx style="verb">GETSALT</spanx> command</strong> retrieves the password-derived salt associated with the authenticated user in the current session. This command is available only after successful authentication using the <spanx style="verb">AUTH HASHEDPASS</spanx> mechanism. The salt is returned as a base64 encoded string. It <bcp14>SHOULD</bcp14> be issued before <strong>MAIL FROM</strong> and requires authentication.</t>
</list></t>

<figure><sourcecode type="example"><![CDATA[
C: GETSALT
S: 220 SALT ODcyZmQwNTFlOTM4OTFh...
]]></sourcecode></figure>

<t><list style="symbols">
  <t>For an unauthenticated session:</t>
</list></t>

<figure><sourcecode type="example"><![CDATA[
C: GETSALT
S: 530 5.7.0 Authentication required
]]></sourcecode></figure>

<t><list style="symbols">
  <t><strong>The <spanx style="verb">RSTSALT</spanx> command</strong> requests the server to reset the server-stored salt for the authenticated user to a new, random (128 bits is sufficient) value, and returns it to the client as a base64 encoded string. It <bcp14>SHOULD</bcp14> be issued before <strong>MAIL FROM</strong> and requires authentication.</t>
</list></t>

<figure><sourcecode type="example"><![CDATA[
C: RSTSALT
S: 220 SALT MDk5YTE4ZmJjODlhMTg4...
]]></sourcecode></figure>

<t><list style="symbols">
  <t>For an unauthenticated session:</t>
</list></t>

<figure><sourcecode type="example"><![CDATA[
C: RSTSALT
S: 530 5.7.0 Authentication required
]]></sourcecode></figure>

<section anchor="authentication-method-auth-hashedpass"><name>Authentication Method: AUTH HASHEDPASS</name>

<t>This protocol defines a new authentication mechanism: <spanx style="verb">AUTH HASHEDPASS</spanx>. This mechanism is intended for use only over secure channels, such as SMTP with STARTTLS or SMTPS (port 465). Servers <bcp14>MUST NOT</bcp14> advertise or accept <spanx style="verb">AUTH HASHEDPASS</spanx> over unencrypted connections.</t>

<t>Unlike <spanx style="verb">AUTH PLAIN</spanx>, which transmits the user's cleartext password (typically as a base64-encoded <spanx style="verb">\0username\0password</spanx> string), <spanx style="verb">AUTH HASHEDPASS</spanx> transmits a cryptographic hash of that string instead.</t>

<t>The client computes the hash of the <spanx style="verb">\0username\0password</spanx> string using a secure, salted <strong>Argon2</strong> hashing function. The result is then sent to the server:</t>

<figure><sourcecode type="example"><![CDATA[
C: AUTH HASHEDPASS base64(\0username\0hash(password))
S: 235 Authentication successful
]]></sourcecode></figure>

<t>The server compares the received hash to a verifier stored at account creation. This allows the server to authenticate the client <strong>without ever seeing or storing the original password</strong>.</t>

<t>Because the hash is static and reusable, this authentication mechanism <bcp14>MUST</bcp14> be used only over a secure channel (e.g., TLS). This protects the hash from replay or offline brute-force attacks.</t>

</section>
<section anchor="message-headers"><name>Message Headers</name>

<t>This protocol defines a couple headers that can be added to a message to identify the sender and the mail.</t>

<t><list style="symbols">
  <t><spanx style="verb">X-Sender-Encrypted</spanx>: This header should be added to a message if its contents are encrypted in compliance with this protocol. If it's missing or set to "no", the message is considered plain-text.</t>
</list></t>

<figure><sourcecode type="example"><![CDATA[
X-Sender-Encrypted: yes
]]></sourcecode></figure>

<t><list style="symbols">
  <t><spanx style="verb">X-Sender-Pubkey</spanx>: This header is a courtesy header that includes the sender's public key as a raw UTF-8 string with a prepended algorithm identifier.</t>
</list></t>

<figure><sourcecode type="example"><![CDATA[
X-Sender-Pubkey: ed25519 AAAAC3NzaC1lZDI1NTE5AAA...
]]></sourcecode></figure>

<t><list style="symbols">
  <t><spanx style="verb">X-Sender-Signature</spanx>: This header is a courtesy header that includes the sender's public key as a raw UTF-8 string with a prepended algorithm identifier. This signature is derived from the raw (byte-for-byte) message contents (after headers), and the optional headers <spanx style="verb">From</spanx>, <spanx style="verb">To</spanx>, <spanx style="verb">Date</spanx>, <spanx style="verb">Subject</spanx> and <spanx style="verb">Message-ID</spanx> (if they're present). This signature can be verified by issuing a <spanx style="verb">PUBKEY</spanx> command to the sender server for the sender email address and verifing the signature against the encrypted source data and the retrieved public key. This header <strong><bcp14>MUST</bcp14> not be trusted</strong> and <strong><bcp14>MUST</bcp14> be validated via PUBKEY</strong> to avoid security pitfalls.</t>
</list></t>

<figure><sourcecode type="example"><![CDATA[
X-Sender-Signature: ed25519 d75a980182b10ab7d54b...
]]></sourcecode></figure>

</section>
</section>
<section anchor="protocol-process"><name>Protocol Process</name>

<t>This protocol defines a simple process to exchange encrypted and/or signed mail.</t>

<section anchor="message-end-to-end-encryption"><name>Message End-to-End Encryption</name>

<t>To provide true E2EE to users, a few conditions must be met.</t>

<t><list style="numbers" type="1">
  <t>The plain-text (unencrypted) mail should only be available to the sender user and the receiver user, with no middle party being able to access it.</t>
  <t>The decryption (private) key should only be accessible to the user which receives the encrypted mail.</t>
</list></t>

<t>By protocol design, each user should have their own public/private keypair, which can be generated via a preferred asymmetric encryption algorithm (e.g. RSA or ED25519).</t>

<t>Each user's public key <bcp14>SHOULD</bcp14> be stored by the SMTP server responsible for handling mail for their domain (e.g., the server handling <spanx style="verb">example.com</spanx> stores public keys for users like <spanx style="verb">user@example.com</spanx>). These public keys enable senders to encrypt messages such that only the intended recipient — the holder of the corresponding private key — can decrypt them.</t>

<t>The private key — which can be used for decrypting messages that have been encrypted by its corresponding public key — <bcp14>SHOULD</bcp14> only be held by the actual user. No copy of it should exist on the SMTP server or any other place.</t>

<section anchor="keypair-generation"><name>Keypair Generation</name>

<t>Generating a keypair poses a problem. Logically, we could just generate a random keypair, store the public key on the SMTP server and keep the private key for ourselves, however this gives users a new responsibility of keeping another secret besides their authentication password.</t>

<t>The ideal scenario should be to use the user's password to derive the private key (and subsequently the public key). However, users cannot realistically be trusted to create secure and random passwords to generate a secure keypair.</t>

<t>Instead, this document proposes the solution of using a random salt, stored by the server. To put this sequence into a proper flow:</t>

<t><list style="numbers" type="1">
  <t>When the user authenticates with the SMTP server, the server checks its local salt store.</t>
  <t>If no salt is found, one is randomly generated (128 bits is sufficient) and stored by the server.</t>
  <t>The server responds to the client (user) with the base64 encoded salt, e.g.:  <vspace blankLines='1'/>
    <figure><sourcecode type="example"><![CDATA[
C: AUTH HASHEDPASS base64(\0username\0hash(password))
S: 235 Authentication successful
S: 250 SALT <base64-salt>
]]></sourcecode></figure>
  </t>
  <t>With the gotten salt, the user derives a private key for the desired algorithm using a function <spanx style="verb">KDF</spanx> by passing it the arguments as such: <spanx style="verb">KDF(password, salt)</spanx></t>
  <t>The user (still in the authenticated session) sets its public key on the SMTP server by using the <spanx style="verb">SETPUBKEY</spanx> command as described in the "Protocol Definitions" section:  <vspace blankLines='1'/>
    <figure><sourcecode type="example"><![CDATA[
C: SETPUBKEY base64(publickey)
S: 250 OK
]]></sourcecode></figure>
  </t>
</list></t>

<t>By using this method, the user and server now have their required data, without leaking any sensitive info. Since the salt is a big part of the private key, but still not sufficient to generate it, this effectively makes the private key only generatable by the user that knows the password. Of course, making the password itself longer and more random helps a lot to making the private key even more unguessable.</t>

</section>
<section anchor="encrypting-and-sending-mail"><name>Encrypting and Sending Mail</name>

<t>Encrypting mail and sending it to the receiver is fairly straightforward. We can use this flow to securely send mail to the receiver without any intermediate party being able to read it:</t>

<t><list style="numbers" type="1">
  <t>The sender (locally) writes out the e-mail with their desired content.</t>
  <t>The sender (e.g. at the "example.net" domain) connects to the receiver's domain's SMTP server and issues an <spanx style="verb">EHLO</spanx>. If the EHLO responds with the <spanx style="verb">ENCRYPTMESSAGE</spanx> and <spanx style="verb">SIGNMESSAGE</spanx> extensions, we can continue with encryption.  <vspace blankLines='1'/>
    <figure><sourcecode type="example"><![CDATA[
C: EHLO example.net
S: 250-example.com
S: ...
S: 250-ENCRYPTMESSAGE
S: 250-SIGNMESSAGE
S: 250-AUTH HASHEDPASS
]]></sourcecode></figure>
  </t>
  <t>The sender issues the <spanx style="verb">PUBKEY</spanx> command for the receiver. If the SMTP server responds with <strong>220</strong>, the receiver has a public key on the server, which we can temporarily store. Else, if the server responds with <strong>550</strong> (the SMTP server does not have a public key for that user), we can fallback to sending normal, plain-text mail.  <vspace blankLines='1'/>
    <figure><sourcecode type="example"><![CDATA[
C: PUBKEY receiver@example.com
S: 220 ed25519 QUFBQUMzTnphQzFsWkR...
]]></sourcecode></figure>
  </t>
  <t>With this public key, we can proceed to encrypt the parts of the mail that we want to secure in <strong>DATA</strong> (e.g. the "Subject" header, the message body, attachments, etc.). We also add the <spanx style="verb">X-Sender-Encrypted: yes</spanx> header to inform the receiver that the message is encrypted. The message <bcp14>MUST</bcp14> be ASCII-armored to ensure best compatability with SMTP (in base64 format).</t>
  <t>If the receiver SMTP server provides <spanx style="verb">SIGNMESSAGE</spanx> in its <spanx style="verb">EHLO</spanx>, we can proceed to sign the message. In the signature function, we can sign the agreed-upon, encrypted parts of the message (e.g. the "Subject" header, the "Date" header (or UNIX timestamp), the "From" header, the "To" header, the message body, etc.). We then append the signature to the mail in the <spanx style="verb">X-Sender-Signature</spanx> header.</t>
  <t>Optionally, we can also provide our public key in the <spanx style="verb">X-Sender-Pubkey</spanx> header. This is optional, because a receiver <bcp14>SHOULD</bcp14> issue their own <spanx style="verb">PUBKEY</spanx> request to the sender's SMTP server instead of trusting the provided one.</t>
  <t>We can now submit the mail to the receiver's SMTP server normally, using the encrypted content instead.</t>
</list></t>

<t>The whole flow in a SMTP session should look something like this:</t>

<t>User/Client side:</t>

<figure><sourcecode type="example"><![CDATA[
C: EHLO example.net
S: 250-example.com
S: ...
S: 250-ENCRYPTMESSAGE
S: 250-SIGNMESSAGE
S: 250-AUTH HASHEDPASS

C: PUBKEY receiver@example.com
S: 220 ed25519 QUFBQUMzTnphQzFsWkR...

C: QUIT
S: 221 2.0.0 Bye
]]></sourcecode></figure>

<t>Sender SMTP server side:</t>

<figure><sourcecode type="example"><![CDATA[
C: EHLO example.net
S: 250-example.com
S: ...
S: 250-ENCRYPTMESSAGE
S: 250-SIGNMESSAGE

C: MAIL FROM:<sender@example.net>
S: 250 2.1.0 OK
C: RCPT TO:<receiver@example.com>
S: 250 2.1.0 OK

C: DATA
S: 354 End data with <CR><LF>.<CR><LF>

Headers and encrypted message data here

C: <CR><LF>.<CR><LF>
S: 250 OK: queued as 12345

C: QUIT
S: 221 2.0.0 Bye
]]></sourcecode></figure>

</section>
<section anchor="reading-mail"><name>Reading Mail</name>

<t>When a receiver wants to read their mail, they can do so like this:</t>

<t><list style="numbers" type="1">
  <t>Authenticate into their SMTP server (e.g. using <spanx style="verb">AUTH HASHEDPASS</spanx>) as described above.</t>
  <t>Request their own <strong>SALT</strong> by issuing a <spanx style="verb">GETSALT</spanx> command.</t>
  <t>Rederive their private key from their password and received salt.</t>
  <t>Use a mail retrieval protocol like <strong>IMAP</strong> or <strong>POP3</strong> and decrypt/verify the mail locally using their private key and the sender's public key (gotten by issuing a <spanx style="verb">PUBKEY &lt;sender email&gt;</spanx> to the sender's SMTP server).</t>
</list></t>

</section>
<section anchor="key-rotation"><name>Key Rotation</name>

<t>Users <bcp14>MAY</bcp14> want to occasionally rotate their keypairs to secure their mail. This can be done with the following flow:</t>

<t><list style="numbers" type="1">
  <t>Authenticate into their SMTP server (e.g. using <spanx style="verb">AUTH HASHEDPASS</spanx>) as described above.</t>
  <t>Requesting a new <strong>SALT</strong> by issuing a <spanx style="verb">RSTSALT</spanx> command.</t>
  <t>Derive a new private key from their password and received salt.</t>
  <t>Issue the new public key (derived from the private key) to the SMTP server by issuing a <spanx style="verb">SETPUBKEY</spanx> command to it.</t>
  <t>The old private key <bcp14>MAY</bcp14> be saved locally to keep access to old mail.</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>



    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC5321">
  <front>
    <title>Simple Mail Transfer Protocol</title>
    <author fullname="J. Klensin" initials="J." surname="Klensin"/>
    <date month="October" year="2008"/>
    <abstract>
      <t>This document is a specification of the basic protocol for Internet electronic mail transport. It consolidates, updates, and clarifies several previous documents, making all or parts of most of them obsolete. It covers the SMTP extension mechanisms and best practices for the contemporary Internet, but does not provide details about particular extensions. Although SMTP was designed as a mail transport and delivery protocol, this specification also contains information that is important to its use as a "mail submission" protocol for "split-UA" (User Agent) mail reading systems and mobile environments. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5321"/>
  <seriesInfo name="DOI" value="10.17487/RFC5321"/>
</reference>
<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>
<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>



    </references>




<?line 385?>

<section numbered="false" anchor="acknowledgments"><name>Acknowledgments</name>

<t>Thanks to the email security community for inspiration, guidance, and decades of pain to learn from.</t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

